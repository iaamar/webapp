# name: Integration Test Workflow

# on:
#   pull_request:
#     branches:
#       - main


# jobs:
#   build:
#     name: Integration Test Check
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout our code
#         uses: actions/checkout@v3

#       # Uninstall PostgreSQL completely and remove all related files
#       - name: Uninstall PostgreSQL and clean up
#         run: |
#           # Stop the PostgreSQL service
#           sudo systemctl stop postgresql

#           # Uninstall PostgreSQL and related packages
#           sudo apt-get --purge remove postgresql postgresql-client postgresql-client-common postgresql-common -y
#           sudo apt-get autoremove -y
#           sudo apt-get autoclean -y

#           # Remove PostgreSQL data directories and configuration files
#           sudo rm -rf /var/lib/postgresql/
#           sudo rm -rf /etc/postgresql/
#           sudo rm -rf /etc/postgresql-common/
#           sudo rm -rf /var/log/postgresql/
#           sudo rm -rf /usr/lib/postgresql/
#           sudo rm -rf /usr/share/postgresql/
#           sudo rm -rf /run/postgresql/

#           # Remove the 'postgres' user and group (if it exists)
#           sudo deluser postgres || true
#           sudo delgroup postgres || true

#           # Clean up any lingering systemd services related to PostgreSQL
#           sudo systemctl daemon-reload

#       # Reinstall PostgreSQL
#       - name: Reinstall PostgreSQL
#         run: |
#           sudo apt-get update -y
#           sudo apt-get install postgresql postgresql-contrib -y
#           sudo systemctl start postgresql
#           sudo systemctl enable postgresql
#           sudo psql --version

#       # Recreate PostgreSQL environment (create user, DB, and configure)
#       - name: Setup PostgreSQL Database
#         run: |
#           sudo -u postgres psql -c "DROP DATABASE IF EXISTS ${{ secrets.DB_DATABASE }};"
#           sudo -u postgres psql -c "DROP ROLE IF EXISTS ${{ secrets.DB_USER }};"
#           sudo -u postgres psql -c "CREATE ROLE ${{ secrets.DB_USER }} WITH LOGIN PASSWORD '${{ secrets.DB_PASSWORD }}';"
#           sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DB_DATABASE }};"
#           sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DB_DATABASE }} TO ${{ secrets.DB_USER }};"
#           sudo -u postgres psql -c "ALTER ROLE ${{ secrets.DB_USER }} WITH SUPERUSER;"

#       # Restart PostgreSQL to apply changes
#       - name: Restart PostgreSQL service
#         run: sudo systemctl restart postgresql

#       # Setup Node.js environment
#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: "21.x"

#       # Install Node.js dependencies
#       - name: Install Dependencies
#         run: npm install
      
#       - name: Reset PostgreSQL Schema
#         run: |
#           sudo -u postgres psql -c "DROP SCHEMA public CASCADE;"
#           sudo -u postgres psql -c "CREATE SCHEMA public;"
#           sudo -u postgres psql -c "DROP TYPE IF EXISTS images CASCADE;""
#           sudo -u postgres psql -c "DROP TABLE IF EXISTS images CASCADE;

      
#       # Run Tests
#       - name: Run Tests
#         env:
#           DB_HOST: localhost
#           DB_USER: ${{ secrets.DB_USER }}
#           DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#           DB_DATABASE: ${{ secrets.DB_DATABASE }}
#           DB_PORT: 5432
#           PORT: 9001
#         run: npm test



name: Integration Test Workflow

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Integration Test Check
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14  # Specify your required PostgreSQL version
        env:
          POSTGRES_DB: amarnagargoje
          POSTGRES_USER: csye6225
          POSTGRES_PASSWORD: user1234
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U csye6225"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21'

      - name: Install dependencies
        run: npm install

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U csye6225; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 1
          done

      - name: Run Tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_DATABASE: amarnagargoje
          DB_USER: csye6225
          DB_PASSWORD: user1234
        run: npm test
